//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Keyword = newKeywordTable("public", "keyword", "")

type keywordTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Word postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type KeywordTable struct {
	keywordTable

	EXCLUDED keywordTable
}

// AS creates new KeywordTable with assigned alias
func (a KeywordTable) AS(alias string) *KeywordTable {
	return newKeywordTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KeywordTable with assigned schema name
func (a KeywordTable) FromSchema(schemaName string) *KeywordTable {
	return newKeywordTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KeywordTable with assigned table prefix
func (a KeywordTable) WithPrefix(prefix string) *KeywordTable {
	return newKeywordTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KeywordTable with assigned table suffix
func (a KeywordTable) WithSuffix(suffix string) *KeywordTable {
	return newKeywordTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKeywordTable(schemaName, tableName, alias string) *KeywordTable {
	return &KeywordTable{
		keywordTable: newKeywordTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newKeywordTableImpl("", "excluded", ""),
	}
}

func newKeywordTableImpl(schemaName, tableName, alias string) keywordTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		WordColumn     = postgres.StringColumn("word")
		allColumns     = postgres.ColumnList{IDColumn, WordColumn}
		mutableColumns = postgres.ColumnList{WordColumn}
	)

	return keywordTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Word: WordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
