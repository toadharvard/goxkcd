//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Comix = newComixTable("public", "comix", "")

type comixTable struct {
	postgres.Table

	// Columns
	ID  postgres.ColumnInteger
	URL postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ComixTable struct {
	comixTable

	EXCLUDED comixTable
}

// AS creates new ComixTable with assigned alias
func (a ComixTable) AS(alias string) *ComixTable {
	return newComixTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ComixTable with assigned schema name
func (a ComixTable) FromSchema(schemaName string) *ComixTable {
	return newComixTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ComixTable with assigned table prefix
func (a ComixTable) WithPrefix(prefix string) *ComixTable {
	return newComixTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ComixTable with assigned table suffix
func (a ComixTable) WithSuffix(suffix string) *ComixTable {
	return newComixTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newComixTable(schemaName, tableName, alias string) *ComixTable {
	return &ComixTable{
		comixTable: newComixTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newComixTableImpl("", "excluded", ""),
	}
}

func newComixTableImpl(schemaName, tableName, alias string) comixTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		URLColumn      = postgres.StringColumn("url")
		allColumns     = postgres.ColumnList{IDColumn, URLColumn}
		mutableColumns = postgres.ColumnList{URLColumn}
	)

	return comixTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:  IDColumn,
		URL: URLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
